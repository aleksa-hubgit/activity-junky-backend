// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package data

import (
	"database/sql/driver"
	"fmt"
)

type ActivityStatus string

const (
	ActivityStatusAvailable ActivityStatus = "available"
	ActivityStatusFinished  ActivityStatus = "finished"
	ActivityStatusCanceled  ActivityStatus = "canceled"
)

func (e *ActivityStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ActivityStatus(s)
	case string:
		*e = ActivityStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ActivityStatus: %T", src)
	}
	return nil
}

type NullActivityStatus struct {
	ActivityStatus ActivityStatus `json:"activity_status"`
	Valid          bool           `json:"valid"` // Valid is true if ActivityStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullActivityStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ActivityStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ActivityStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullActivityStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ActivityStatus), nil
}

type UserType string

const (
	UserTypeParticipant UserType = "participant"
	UserTypeOrganizer   UserType = "organizer"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Activity struct {
	ID          int32          `json:"id"`
	UserID      int32          `json:"user_id"`
	Category    string         `json:"category"`
	Date        string         `json:"date"`
	Price       float64        `json:"price"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	TotalPlaces int32          `json:"total_places"`
	Status      ActivityStatus `json:"status"`
}

type Reservation struct {
	ID            int32  `json:"id"`
	ParticipantID int32  `json:"participant_id"`
	ActivityID    int32  `json:"activity_id"`
	Date          string `json:"date"`
}

type Subscription struct {
	ID            int32  `json:"id"`
	ParticipantID int32  `json:"participant_id"`
	OrganizerID   int32  `json:"organizer_id"`
	Date          string `json:"date"`
	Active        bool   `json:"active"`
}

type User struct {
	ID       int32    `json:"id"`
	Username string   `json:"username"`
	Email    string   `json:"email"`
	Password string   `json:"password"`
	UserType UserType `json:"user_type"`
}
